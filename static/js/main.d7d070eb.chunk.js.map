{"version":3,"sources":["utils/dateMethod.js","components/DisplayText.js","constants/labels.js","components/AboutDate.js","components/DateInput.js","App.js","serviceWorker.js","index.js"],"names":["isLeapYear","year","formatDate","date","Date","toDateString","DisplayText","label","value","className","class","role","LABELS","NO_OF_DAYS","NO_OF_MONDAYS","START_DATE_LEAP_YEAR","END_DATE_LEAP_YEAR","FACTS_OF_START_DATE","AboutDate","from","to","fact","allLabels","Object","keys","performAction","startDate","endDate","fromDate","toDate","Math","round","day","totalDays","setDate","getDate","getDay","getDiffSpecificDays","getFullYear","map","index","key","DateInput","props","getFactsByStartDate","month","getMonth","axios","get","then","response","setState","data","catch","err","handleEvent","event","picker","isSelected","onSelected","state","autoApply","autoUpdateInput","this","onEvent","onApply","containerClass","type","placeholder","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.d7d070eb.chunk.js","sourcesContent":["export const isLeapYear = (year) => {\n\treturn year % 100 === 0 ? year % 400 === 0 : year % 4 === 0;\n};\n\nexport const getDiffDays = (startDate, endDate) => {\n\treturn Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\n};\n\nexport const getDiffSpecificDays = (startDate, endDate, day) => {\n\tlet totalDays = 0;\n\tstartDate.setDate(startDate.getDate() + (day - startDate.getDay() + 7) % 7);\n\twhile (startDate < endDate) {\n\t\ttotalDays++;\n\t\tstartDate.setDate(startDate.getDate() + 7);\n\t}\n\treturn totalDays;\n};\n\nexport const getDateRange = (startDate, endDate) => {\n\treturn `${formatDate(startDate)} - ${formatDate(endDate)}`;\n};\n\nconst formatDate = (date) => {\n\tdate = new Date(date);\n\treturn date.toDateString();\n};\n","import React from 'react';\n\nconst DisplayText = ({ label, value }) => {\n\treturn (\n\t\t<div className=\"border mb-3 p-3\">\n\t\t\t<h5>{label}</h5>\n\t\t\t<span className=\"font-weight-bold text-danger\">{`${value}`}</span>\n\t\t\t{value === '' && (\n\t\t\t\t<div class=\"spinner-border text-danger\" role=\"status\">\n\t\t\t\t\t<span class=\"sr-only\">Loading...</span>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default DisplayText;\n","export const LABELS = {\n\tNO_OF_DAYS: 'No. of Days between the date range',\n\tNO_OF_MONDAYS: 'Number of Mondays between the date range',\n\tSTART_DATE_LEAP_YEAR: 'Is End Date a Leap year?',\n\tEND_DATE_LEAP_YEAR: 'Is Starts Date a Leap year?',\n\tFACTS_OF_START_DATE: 'Start Date Facts'\n};\n","import React from 'react';\nimport DisplayText from './DisplayText';\nimport { isLeapYear, getDiffSpecificDays, getDiffDays } from '../utils/dateMethod';\nimport { LABELS } from '../constants/labels';\n\nconst AboutDate = ({ from, to, fact }) => {\n\tconst allLabels = Object.keys(LABELS);\n\n\tconst performAction = (label) => {\n\t\tconst fromDate = new Date(from);\n\t\tconst toDate = new Date(to);\n\t\tswitch (label) {\n\t\t\tcase 'NO_OF_DAYS':\n\t\t\t\treturn getDiffDays(fromDate, toDate);\n\n\t\t\tcase 'NO_OF_MONDAYS':\n\t\t\t\treturn getDiffSpecificDays(fromDate, toDate, 1); //1 is for Mondays\n\n\t\t\tcase 'START_DATE_LEAP_YEAR':\n\t\t\t\treturn isLeapYear(fromDate.getFullYear());\n\n\t\t\tcase 'END_DATE_LEAP_YEAR':\n\t\t\t\treturn isLeapYear(toDate.getFullYear());\n\n\t\t\tcase 'FACTS_OF_START_DATE':\n\t\t\t\treturn fact;\n\n\t\t\tdefault:\n\t\t\t\treturn true;\n\t\t}\n\t};\n\n\tconst displayText = () => {\n\t\treturn allLabels.map((label, index) => {\n\t\t\treturn <DisplayText key={index} label={LABELS[label]} value={performAction(label)} />;\n\t\t});\n\t};\n\n\treturn <div className=\"bg-light text-dark  border rounded my-4 p-3\">{displayText()}</div>;\n};\n\nexport default AboutDate;\n","import React from 'react';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport 'bootstrap-daterangepicker/daterangepicker.css';\nimport { getDateRange } from '../utils/dateMethod';\nimport AboutDate from './AboutDate';\nimport axios from 'axios';\n\nclass DateInput extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisSelected: false,\n\t\t\tfact: '',\n\t\t\tstartDate: 0,\n\t\t\tendDate: 0\n\t\t};\n\t}\n\n\tgetFactsByStartDate = (startDate) => {\n\t\tconst fromDate = new Date(startDate);\n\t\tconst month = fromDate.getMonth() + 1;\n\t\taxios\n\t\t\t.get(`http://numbersapi.com/${month}/${fromDate.getDate()}/date`)\n\t\t\t.then((response) => {\n\t\t\t\tthis.setState({ fact: response.data });\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tthis.setState({ fact: err });\n\t\t\t});\n\t};\n\n\thandleEvent = (event, picker) => {\n\t\tthis.setState({\n\t\t\tisSelected: false,\n\t\t\tfact: ''\n\t\t});\n\t};\n\n\tonSelected = (event, picker) => {\n\t\tthis.setState({\n\t\t\tstartDate: picker.startDate,\n\t\t\tendDate: picker.endDate,\n\t\t\tisSelected: true\n\t\t});\n\t\tthis.getFactsByStartDate(picker.startDate);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"row my-3\">\n\t\t\t\t<div className=\"col-md-6\">\n\t\t\t\t\t<h3>Select Date Range</h3>\n\t\t\t\t\t<DateRangePicker\n\t\t\t\t\t\tautoApply={true}\n\t\t\t\t\t\tautoUpdateInput={false}\n\t\t\t\t\t\tstartDate={this.state.startDate}\n\t\t\t\t\t\tendDate={this.state.endDate}\n\t\t\t\t\t\tonEvent={this.handleEvent}\n\t\t\t\t\t\tonApply={this.onSelected}\n\t\t\t\t\t\tcontainerClass=\"w-100\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"w-100 px-3 py-2 border border-dark rounded\"\n\t\t\t\t\t\t\tplaceholder=\"Select Date Range\"\n\t\t\t\t\t\t\tvalue={this.state.startDate ? getDateRange(this.state.startDate, this.state.endDate) : ''}\n\t\t\t\t\t\t\tonChange={this.handleEvent}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</DateRangePicker>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-md-6\">\n\t\t\t\t\t{this.state.isSelected && (\n\t\t\t\t\t\t<AboutDate from={this.state.startDate} to={this.state.endDate} fact={this.state.fact} />\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default DateInput;\n","import React from 'react';\nimport DateInput from './components/DateInput';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<DateInput />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}